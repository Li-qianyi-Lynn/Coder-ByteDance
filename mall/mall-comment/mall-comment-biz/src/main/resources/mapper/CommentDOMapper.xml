<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coder.mall.comment.biz.domain.mapper.CommentDOMapper">

    <sql id="Base_Column_List">
        id, product_id, user_id, content_uuid, is_content_empty, image_url, `level`, reply_total,
    like_total, parent_id, reply_comment_id, reply_user_id, is_top, create_time, update_time
    </sql>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from t_comment
        where id = #{commentId,jdbcType=BIGINT}
    </delete>

    <resultMap id="BaseResultMap" type="com.coder.mall.comment.biz.domain.dataobject.CommentDO">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="product_id" jdbcType="BIGINT" property="productId"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="content_uuid" jdbcType="VARCHAR" property="contentUuid"/>
        <result column="is_content_empty" jdbcType="BIT" property="isContentEmpty"/>
        <result column="image_url" jdbcType="VARCHAR" property="imageUrl"/>
        <result column="level" jdbcType="TINYINT" property="level"/>
        <result column="reply_total" jdbcType="BIGINT" property="replyTotal"/>
        <result column="like_total" jdbcType="BIGINT" property="likeTotal"/>
        <result column="parent_id" jdbcType="BIGINT" property="parentId"/>
        <result column="reply_comment_id" jdbcType="BIGINT" property="replyCommentId"/>
        <result column="reply_user_id" jdbcType="BIGINT" property="replyUserId"/>
        <result column="is_top" jdbcType="TINYINT" property="isTop"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>


    <insert id="batchInsert" parameterType="list">
        insert IGNORE into t_comment (id, product_id, user_id,
        content_uuid, is_content_empty, image_url,
        `level`, reply_total, like_total,
        parent_id, reply_comment_id, reply_user_id,
        is_top, create_time, update_time
        )
        values
        <foreach collection="comments" item="comment" separator=",">
            (#{comment.id}, #{comment.productId}, #{comment.userId}, #{comment.contentUuid}, #{comment.isContentEmpty}
            , #{comment.imageUrl}, #{comment.level}, #{comment.replyTotal}, #{comment.likeTotal}, #{comment.parentId}
            , #{comment.replyCommentId}, #{comment.replyUserId}, #{comment.isTop}, #{comment.createTime},
            #{comment.updateTime})
        </foreach>

    </insert>

    <update id="updateChildCommentTotal">
        update t_comment
        set child_comment_total = child_comment_total + 1
        where id = #{parentId}
    </update>

    <select id="selectByCommentIds" resultMap="BaseResultMap" parameterType="list">
        select
        id, level, parent_id, user_id
        from t_comment
        where id in
        <foreach collection="commentIds" open="(" separator="," close=")" item="commentId">
            #{commentId}
        </foreach>
    </select>

    <select id="selectPageList" resultMap="BaseResultMap" parameterType="map">
        select id,
               user_id,
               content_uuid,
               is_content_empty,
               image_url,
               like_total,
               is_top,
               create_time,
               child_comment_total
        from t_comment
        where product_id = #{productId}
          and level = 1
        limit #{offset}, #{pageSize}
    </select>

    <select id="selectTwoLevelCommentByIds" resultMap="BaseResultMap" parameterType="list">
        select
        id, user_id, content_uuid, is_content_empty, image_url, like_total, create_time
        from t_comment
        where id in
        <foreach collection="commentIds" open="(" separator="," close=")" item="commentId">
            #{commentId}
        </foreach>
    </select>

    <select id="selectChildCommentTotalById" resultType="long">
        select child_comment_total
        from t_comment
        where id = #{commentId}
          and level = 1
    </select>

    <select id="selectChildPageList" resultMap="BaseResultMap" parameterType="map">
        select id,
               user_id,
               product_id,
               content_uuid,
               is_content_empty,
               image_url,
               like_total,
               create_time,
               reply_user_id,
               parent_id,
               reply_comment_id
        from t_comment
        where parent_id = #{parentId}
          and level = 2
        order by id
        limit #{offset}, #{pageSize}
    </select>
    <select id="getCommentIdToInsert" resultType="java.lang.Long">
        select id
        from t_comment
        order by id desc
        limit 1
    </select>

    <select id="selectCommentTotalByProductId" resultType="java.lang.Long">
        select count(1)
        from t_comment
        where product_id = #{productId}
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from t_comment
        where id = #{commentId,jdbcType=BIGINT}
    </select>
</mapper>